generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  user
  service_provider
}

model User {
  user_id          Int       @id @default(autoincrement())
  username         String    @unique
  password         String
  email            String    @unique
  date_created     DateTime  @default(now()) @map(name: "created_at")
  last_login       DateTime  @default(now())
  user_type        UserType  @default(user)
  profileId        Int       @unique
  Review           Review?
  Profile          Profile   @relation(fields: [profileId], references: [profile_id], onDelete: Cascade)
  servicesProvided Service[] @relation("ProviderRelation")
  sentContacts     Contact[] @relation("ContactUserRelation")
  receivedContacts Contact[] @relation("ContactProviderRelation")
}

model Profile {
  profile_id          Int     @id @default(autoincrement())
  first_name          String
  last_name           String
  phone_number        String  @unique
  address             String
  city                String
  county              String
  Eircode             String  @unique
  profile_picture_url String?
  bio                 String?
  User                User?
}

model ServiceCategory {
  service_category_id Int       @id @default(autoincrement())
  service_name        String
  description         String?
  Service             Service[]
}

model Service {
  service_id       Int             @id @default(autoincrement())
  provider_id      Int
  service_type_id  Int
  service_category ServiceCategory @relation(fields: [service_type_id], references: [service_category_id])
  description      String          @map("description")
  pricing          Float           @map("pricing")
  availability     String          @map("availability")
  date_created     DateTime        @default(now()) @map("date_created")
  provider         User            @relation("ProviderRelation", fields: [provider_id], references: [user_id])
  Review           Review[]
}

model Contact {
  contact_id      Int      @id @default(autoincrement())
  user_id         Int
  provider_id     Int
  user            User     @relation("ContactUserRelation", fields: [user_id], references: [user_id])
  who             UserType
  provider        User     @relation("ContactProviderRelation", fields: [provider_id], references: [user_id])
  message_content String
  date_sent       DateTime @default(now()) @map(name: "created_at")
}

model Review {
  review_id   Int      @id @default(autoincrement())
  service_id  Int      @map("service_id")
  reviewer_id Int      @unique @map("reviewer_id")
  rating      Float
  comment     String?
  date_posted DateTime
  service     Service  @relation(fields: [service_id], references: [service_id])
  reviewer    User     @relation(fields: [reviewer_id], references: [user_id])
}
